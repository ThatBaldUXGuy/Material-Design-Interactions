require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"colors":[function(require,module,exports){
exports.white = "#ffffff";

exports.black = "#000000";

exports.seekPink = "#E60278";

exports.cardBackground = "#ffffff";

exports.screenBackground = "#f5f5f5";

exports.cardShadow = "rgba(0,0,0,0.2)";



},{}],"materialComponents":[function(require,module,exports){
exports.fab = function(superLayer, color, icon, initialOpacity, initialScale) {
  var diameter, fabExternalPadding, newFab;
  diameter = 56;
  fabExternalPadding = 16;
  newFab = new Layer({
    backgroundColor: color,
    opacity: initialOpacity,
    width: diameter,
    height: diameter,
    scale: initialScale,
    borderRadius: diameter,
    superLayer: superLayer,
    html: icon,
    style: {
      "padding": "10px 0",
      "text-align": "center",
      "font-weight": "light",
      "font-size": "36px"
    },
    x: superLayer.maxX - (diameter + fabExternalPadding),
    y: superLayer.maxY - (diameter + fabExternalPadding)
  });
  return newFab;
};



},{}],"materialInteractions":[function(require,module,exports){
var raiseLayerShadowMultiplier;

raiseLayerShadowMultiplier = 4;

exports.raiseAndLowerLayer = function(layer) {
  var inialShadowSpread, initialShadowBlur, lowerlayerAnimation, raiseLayerAnimation;
  initialShadowBlur = layer.shadowBlur;
  inialShadowSpread = layer.shadowSpread;
  raiseLayerAnimation = new Animation({
    layer: layer,
    properties: {
      scale: 1.01,
      shadowBlur: initialShadowBlur * raiseLayerShadowMultiplier,
      shadowSpread: inialShadowSpread * raiseLayerShadowMultiplier
    },
    time: 0.2,
    curve: "ease-in-out"
  });
  lowerlayerAnimation = new Animation({
    layer: layer,
    properties: {
      scale: 1,
      shadowBlur: initialShadowBlur,
      shadowSpread: inialShadowSpread
    },
    delay: 0.4,
    time: 0.4,
    curve: "ease-in-out"
  });
  raiseLayerAnimation.start();
  return raiseLayerAnimation.on("end", function() {
    return lowerlayerAnimation.start();
  });
};

exports.raiseLayer = function(layer) {
  var raiseLayerAnimation;
  raiseLayerAnimation = new Animation({
    layer: layer,
    properties: {
      scale: 1.01,
      shadowBlur: layer.shadowBlur * raiseLayerShadowMultiplier,
      shadowSpread: layer.shadowSpread * raiseLayerShadowMultiplier
    },
    time: 0.2,
    curve: "ease-in-out"
  });
  return raiseLayerAnimation.start();
};

exports.expandHorizontally = function(layer, animationDelay) {
  var exandHorizontallyAnimation;
  exandHorizontallyAnimation = new Animation({
    layer: layer,
    properties: {
      width: layer.superLayer.width,
      x: layer.superLayer.x
    },
    delay: animationDelay,
    time: 0.2,
    curve: "ease-in-out"
  });
  return exandHorizontallyAnimation.start();
};

exports.expandVertically = function(layer, animationDelay) {
  var expandVerticallyAnimation;
  expandVerticallyAnimation = new Animation({
    layer: layer,
    properties: {
      height: layer.superLayer.height,
      y: layer.superLayer.y
    },
    delay: animationDelay,
    time: 0.2,
    curve: "ease-in-out"
  });
  return expandVerticallyAnimation.start();
};

exports.rotateLayer = function(layer, rotationAngle) {
  var rotateAnimation;
  rotateAnimation = new Animation({
    layer: layer,
    properties: {
      rotation: rotationAngle
    },
    time: 0.2,
    curve: "ease-in-out"
  });
  return rotateAnimation.start();
};

exports.moveLayer = function(layer, moveByX, moveByY, moveDelay) {
  var moveAnimation;
  moveAnimation = new Animation({
    layer: layer,
    properties: {
      x: layer.x + moveByX,
      y: layer.y + moveByY
    },
    delay: moveDelay,
    time: 0.2,
    curve: "ease-in-out"
  });
  return moveAnimation.start();
};

exports.rippleEffect = function(touchX, touchY, layer) {
  var ripple, rippleAnimation;
  layer.clip = true;
  ripple = new Layer({
    borderRadius: "50%",
    scale: 0,
    opacity: .5,
    superLayer: layer,
    backgroundColor: layer.backgroundColor,
    brightness: 75,
    midX: touchX,
    midY: touchY,
    index: 0,
    force2d: true
  });
  rippleAnimation = ripple.animate({
    properties: {
      scale: layer.width / 50,
      clip: true,
      opacity: 0
    },
    curve: "ease-out",
    time: .3
  });
  return rippleAnimation.on(Events.AnimationEnd, function() {
    return ripple.destroy();
  });
};

exports.animateIconBounds = function(icon) {
  var iconTapBounds;
  iconTapBounds = new Layer({
    backgroundColor: icon.backgroundColor,
    opacity: 1,
    brightness: 115,
    width: 45,
    height: 45,
    borderRadius: 45,
    midX: icon.midX,
    midY: icon.midY
  });
  iconTapBounds.animate({
    properties: {
      opacity: 1
    },
    curve: "ease-in-out",
    time: 0.2
  });
  return iconTapBounds.on(Events.AnimationEnd, function() {
    iconTapBounds.animate({
      properties: {
        opacity: 0
      },
      curve: "ease-in-out"
    });
    return iconTapBounds.destroy();
  });
};

exports.appearFromCentre = function(layer, animationDelay) {
  var appearAnimation;
  appearAnimation = new Animation({
    layer: layer,
    properties: {
      opacity: 1,
      scale: 1
    },
    delay: animationDelay,
    curve: "spring(100,20,25)"
  });
  return appearAnimation.start();
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
